```{julia}
using Revise
using Whittaker2
using GLMakie, Shapefile
using UnPack, JLD2
using Ipaper, RTableTools
import Ipaper.sf: st_extract
# using YAXArrays
# cd(path_mnt("Z:/GitHub/jl-spatial/Whittaker2.jl/scripts/Project_Global_LAI_smoothing"))

# includet("src/main_Terra.jl")
includet("../src/MODISTools.jl")
includet("../src/main_makie.jl")
includet("../src/main_whit_makie.jl")
```

```{julia}
# dir_proj = path_mnt("/mnt/z/GitHub/jl-spatial/Whittaker2.jl/scripts/Project_Global_LAI_smoothing")
dir_proj = "./"

dateInfo = fread("$dir_proj/data/MODIS_LAI_dateInfo.csv")
fout = "$dir_proj/INPUT/sampled_st1e3_2018-2022_grid,2_4.jld2"
dates = @pipe dateInfo |> _[_.year.>=2018, :date]

## load data
l = load(fout)
@unpack st, mat_LAI, mat_QC = l

function get_input(i)
  y = mat_LAI[:, i]
  qc = mat_QC[:, i]
  missval = UInt8(255)
  y[y.==missval] .= UInt8(0)
  qc[qc.==missval] .= UInt8(0)
  (; y=y * 0.1f0, qc)
end

```

## 读取lambda

```{julia}
nodata = 0.0f0
f = "OUTPUT/global_param_lambda_cv/lambda_cv_2018-2022.zarr" |> path_mnt

ds = open_dataset(f)
z = ds["grid.2_4"].data
b = st_bbox(z)
ra = rast(z, st_bbox(z))
lims = ((b.xmin, b.xmax), (b.ymin, b.ymax))
```

```{julia}
pnts = st_dims.(st.geometry)
xx, yy = st_dims(pnts)

@time ra2 = rast(z[:, :, 1], st_bbox(z);)
@time λs = st_extract(ra2, pnts)[2][:];
```

```{julia}
i = Observable(1)
d = @lift get_input($i)
# station = @lift st[$i, :]
point = @lift pnts[$i]
slon = @lift $point[1]
slat = @lift $point[2]

## 拟合
function process_whit(d; kw...)
  dat = deepcopy(d)
  smooth_whit(dat.y, dat.qc, dates;
    adj_factor=5, iters=3,
    wFUN=wBisquare_Kong2023,
    options=(trs_high=0.7, trs_low=0.4, trs_bg=0.2, step=0.3, kw...)
  )
end

λ = @lift λs[$i]
l  = @lift process_whit($d; λ=$λ)
l2 = @lift process_whit($d;)

fig = Figure(size=(1600, 700), outer_padding=2) # figure_padding = 10
ax = Axis(fig[1, 1], title="Parameter: λ", limits=lims)
plt = imagesc!(ax, ra[:, :, 1], colorscale=log10, colorrange=(1, 100))
Colorbar(fig[1, 2], plt, height=Relative(0.4), tellwidth=true)

GLMakie.scatter!(ax, xx, yy; marker=:cross,
  markersize=14, strokewidth=0,
  color="red", strokecolor="blue")
GLMakie.scatter!(ax, slon, slat; marker=:cross,
  markersize=20, strokewidth=0, color="blue")
# fig

function fun_on_click!(slon, slat)
  i[] = findnear((slon, slat), pnts)
end
map_on_mouse(ax, slon, slat; (fun!)= fun_on_click!,verbose=true)

function plot_whit_fitting(fig, l; title=nothing)
  title == nothing && (title = @lift @sprintf("site: %d, λ=%.3f", $i, λs[$i]))
  
  ax_time = Axis(fig, title=title)
  set_xticks!(ax_time, dates)

  dat = @lift $l["data"]
  dfit = @lift $l["predict"]
  plts_input = makie_plot_input(ax_time, dat[]) # 全部都在这里
  plts_fit = makie_plot_fitting(ax_time, dfit[])

  onany(dat, dfit) do dat, dfit
    ylims = -0.1f0, maximum(dat.y) + 0.5f0
    ax_time.limits[] = (nothing, ylims)
    makie_plot_input(ax_time, dat; plts=plts_input)
    makie_plot_fitting(ax_time, dfit; plts=plts_fit)
  end
end

sub = fig[1, end+1]
plot_whit_fitting(sub[1, 1], l)
plot_whit_fitting(sub[2, 1], l2; title="auto lambda")

fig
```

> 另外做一个站点分布的图
> 一个是自动率定获得的参数
