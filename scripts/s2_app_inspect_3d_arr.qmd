## 1. 加载数据 ------------------------------------------------------------------

```{julia}
using Rasters
using Terra
includet("../src/main_makie.jl")
# includet("../src/zarr.jl")

using Ipaper
using YAXArrays
using Zarr

f = "OUTPUT/global_param_lambda_cv/lambda_cv_2018-2022.zarr" |> path_mnt
ds = open_dataset(f)

grids = names(ds) |> sort
z = ds["grid.2_4"].data

b = Terra.bbox(z.attrs["bbox"]...)
lon, lat = bbox2dims(b; cellsize=1/240)
lon = collect(lon)
lat = collect(lat)

cellx, celly = bbox2cellsize(b, size(z))
## 全球的lambda分布18gb
time = 1:229
@time lambda = z[:, :, 1];
lambda[lambda.==0] .= NaN;
```

### 如何把`lambda`拼接起来

## 2. 绘图 --------------------------------------------------------------------

**设计一个复杂的应用，检查`whittaker`的表现**

1. 鹰眼图，显示全球与局地

2. 局地只显示一个grid
   
3. LAI时间序列


```{julia}
my_theme!(font_size=24)
style_line = (; linestyle=:dash, color=:red, linewidth=2)

fig = Figure(size=(1900, 800), outer_padding=2) # figure_padding = 10

sg = SliderGrid(fig[1, 2], (label="time", range=time, startvalue=middle(time)))
stime = sg.sliders[1].value

slon = Observable(middle(lon))
slat = Observable(middle(lat))

i = @lift findnear($slon, lon)
j = @lift findnear($slat, lat)
k = @lift findnear($stime, time)

str_pos = @lift @sprintf("Position: i=%d, j=%d", $i, $j)
label_pos = Label(fig[1, 1], str_pos, fontsize=30, tellwidth=false)
# z = @lift LAI[$i, $j, :]
# mat_z = @lift LAI[:, :, $k]

## 时间序列图
# ax_time = Axis(fig[2, 1], title=@lift(@sprintf("时间序列图: time = %d", $stime)),
#   xlabel="DOY")
# plot!(ax5, time, zs, label="China")
# lines!(ax_time, time, z, label="Pixel", color=:blue)
# vlines!(ax_time, k; style_line...) # , zs[$k]

## 空间图
plot_main = fig[2, 2]
ax_xy = Axis(plot_main, title=@lift(@sprintf("XY剖面图: time = %d", $stime)),
  # yticks=15:10:55,
  xlabel="Latitude", ylabel="Longitude")

# nan_color = RGBA(1.0, 0.0, 0.0, 0.5)

zlims = [0, 50]
plt = big_heatmap!(ax_xy, lon, lat, lambda; nan_color, colorrange=zlims)
Colorbar(fig[:, 0], plt, height=Relative(0.5))
vlines!(ax_xy, slon; style_line...)
hlines!(ax_xy, slat; style_line...)

map_on_mouse(fig, plt, slon, slat)
map_on_keyboard(fig, slon, slat, stime, cellx, celly; step=500)

colgap!(fig.layout, 0)
rowgap!(fig.layout, 0)

fig
```
